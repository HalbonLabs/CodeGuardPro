{
  "name": "codeguard-pro",
  "displayName": "CodeGuard Pro",
  "description": "AI-powered code quality suite using MCP (Model Context Protocol) tools. Run ESLint, security scans, testing frameworks, and code analysis through Copilot with 29+ integrated quality tools",
  "version": "1.0.6",
  "publisher": "HalbonLabs",
  "icon": "icon.png",
  "author": {
    "name": "CodeGuard Pro Team",
    "email": "contact@codeguard.dev"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/codeguard-pro/vscode-codeguard-pro"
  },
  "homepage": "https://github.com/codeguard-pro/vscode-codeguard-pro#readme",
  "bugs": {
    "url": "https://github.com/codeguard-pro/vscode-codeguard-pro/issues"
  },
  "license": "MIT",
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "engines": {
    "vscode": "^1.103.0"
  },
  "categories": [
    "Linters",
    "Testing",
    "Other",
    "Debuggers"
  ],
  "keywords": [
    "code quality",
    "linting",
    "security",
    "testing",
    "biome",
    "eslint",
    "playwright",
    "cypress",
    "code analysis",
    "security scan",
    "typescript",
    "javascript"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/simple-extension.js",
  "contributes": {
    "commands": [
      {
        "command": "codeguard-pro.showSimple",
        "title": "Open CodeGuard Pro (Sidebar)",
        "category": "CodeGuard Pro",
        "icon": "$(dashboard)"
      },
      {
        "command": "codeguard-pro.openSettings",
        "title": "Open Settings",
        "category": "CodeGuard Pro",
        "icon": "$(gear)"
      },
      {
        "command": "codeguard-pro.test",
        "title": "Test Extension",
        "category": "CodeGuard Pro",
        "icon": "$(pulse)"
      }
    ],
    "views": {
      "codeguard-pro-webview": [
        {
          "id": "codeguard-pro.sidebarView",
          "name": "CodeGuard Pro Tools",
          "type": "webview",
          "when": "true",
          "icon": "$(shield)"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "codeguard-pro-webview",
          "title": "CodeGuard Pro",
          "icon": "$(shield)"
        }
      ]
    },
    "configuration": {
      "title": "CodeGuard Pro",
      "properties": {
        "codeguard-pro.enableStatusBar": {
          "type": "boolean",
          "default": true,
          "description": "Show CodeGuard Pro status in status bar"
        },
        "codeguard-pro.autoLintOnSave": {
          "type": "boolean",
          "default": false,
          "description": "Automatically lint and fix code on save (uses Biome)"
        },
        "codeguard-pro.testFramework": {
          "type": "string",
          "enum": [
            "playwright",
            "cypress",
            "selenium",
            "puppeteer"
          ],
          "default": "playwright",
          "description": "Preferred E2E testing framework"
        },
        "codeguard-pro.duplicateCodeThreshold": {
          "type": "number",
          "default": 100,
          "description": "Minimum token threshold for duplicate code detection"
        },
        "codeguard-pro.complexityThreshold": {
          "type": "number",
          "default": 15,
          "description": "Maximum cognitive complexity threshold"
        },
        "codeguard-pro.enableSonarAnalysis": {
          "type": "boolean",
          "default": true,
          "description": "Enable SonarJS code quality analysis"
        },
        "codeguard-pro.securityLevel": {
          "type": "string",
          "enum": [
            "low",
            "moderate",
            "high",
            "critical"
          ],
          "default": "moderate",
          "description": "Security vulnerability level threshold"
        },
        "codeguard-pro.disabledTools": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "List of disabled tool IDs"
        },
        "codeguard-pro.autoExpandCategories": {
          "type": "boolean",
          "default": true,
          "description": "Auto-expand all categories on startup"
        },
        "codeguard-pro.showToolDescriptions": {
          "type": "boolean",
          "default": true,
          "description": "Show detailed tool descriptions in list view"
        },
        "codeguard-pro.mcp.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable MCP (Model Context Protocol) integration for AI-powered analysis"
        },

        "codeguard-pro.mcp.tools.eslint.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable ESLint MCP server for JavaScript/TypeScript linting"
        },
        "codeguard-pro.mcp.tools.eslint.endpoint": {
          "type": "string",
          "default": "",
          "description": "ESLint MCP server endpoint URL (leave empty for local execution)"
        },
        "codeguard-pro.mcp.tools.eslint.configPath": {
          "type": "string",
          "default": "",
          "description": "Path to ESLint configuration file (optional)"
        },

        "codeguard-pro.mcp.tools.biome.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Biome MCP server for fast linting and formatting"
        },
        "codeguard-pro.mcp.tools.biome.endpoint": {
          "type": "string",
          "default": "",
          "description": "Biome MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.tools.prettier.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Prettier MCP server for code formatting"
        },
        "codeguard-pro.mcp.tools.prettier.endpoint": {
          "type": "string",
          "default": "",
          "description": "Prettier MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.tools.typescript.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable TypeScript MCP server for type checking"
        },
        "codeguard-pro.mcp.tools.typescript.endpoint": {
          "type": "string",
          "default": "",
          "description": "TypeScript MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.tools.npmAudit.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable npm audit MCP server for security vulnerability scanning"
        },
        "codeguard-pro.mcp.tools.npmAudit.endpoint": {
          "type": "string",
          "default": "",
          "description": "npm audit MCP server endpoint URL (leave empty for local execution)"
        },
        "codeguard-pro.mcp.tools.npmAudit.severity": {
          "type": "string",
          "enum": ["low", "moderate", "high", "critical"],
          "default": "moderate",
          "description": "Minimum severity level for npm audit reports"
        },

        "codeguard-pro.mcp.tools.retireJs.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Retire.js MCP server for JavaScript library vulnerability scanning"
        },
        "codeguard-pro.mcp.tools.retireJs.endpoint": {
          "type": "string",
          "default": "",
          "description": "Retire.js MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.tools.owasp.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable OWASP Dependency Check MCP server"
        },
        "codeguard-pro.mcp.tools.owasp.endpoint": {
          "type": "string",
          "default": "",
          "description": "OWASP Dependency Check MCP server endpoint URL"
        },

        "codeguard-pro.mcp.tools.playwright.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Playwright MCP server for E2E testing"
        },
        "codeguard-pro.mcp.tools.playwright.endpoint": {
          "type": "string",
          "default": "",
          "description": "Playwright MCP server endpoint URL (leave empty for local execution)"
        },
        "codeguard-pro.mcp.tools.playwright.browser": {
          "type": "string",
          "enum": ["chromium", "firefox", "webkit", "all"],
          "default": "chromium",
          "description": "Default browser for Playwright tests"
        },

        "codeguard-pro.mcp.tools.cypress.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Cypress MCP server for E2E testing"
        },
        "codeguard-pro.mcp.tools.cypress.endpoint": {
          "type": "string",
          "default": "",
          "description": "Cypress MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.tools.jest.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Jest MCP server for unit testing"
        },
        "codeguard-pro.mcp.tools.jest.endpoint": {
          "type": "string",
          "default": "",
          "description": "Jest MCP server endpoint URL (leave empty for local execution)"
        },
        "codeguard-pro.mcp.tools.jest.coverage": {
          "type": "boolean",
          "default": true,
          "description": "Enable test coverage reporting in Jest"
        },

        "codeguard-pro.mcp.tools.vitest.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Vitest MCP server for fast unit testing"
        },
        "codeguard-pro.mcp.tools.vitest.endpoint": {
          "type": "string",
          "default": "",
          "description": "Vitest MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.tools.sonarJs.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable SonarJS MCP server for code quality analysis"
        },
        "codeguard-pro.mcp.tools.sonarJs.endpoint": {
          "type": "string",
          "default": "",
          "description": "SonarJS MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.tools.plato.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Plato MCP server for code complexity analysis"
        },
        "codeguard-pro.mcp.tools.plato.endpoint": {
          "type": "string",
          "default": "",
          "description": "Plato MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.tools.jscpd.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable JSCPD MCP server for duplicate code detection"
        },
        "codeguard-pro.mcp.tools.jscpd.endpoint": {
          "type": "string",
          "default": "",
          "description": "JSCPD MCP server endpoint URL (leave empty for local execution)"
        },
        "codeguard-pro.mcp.tools.jscpd.threshold": {
          "type": "number",
          "default": 100,
          "description": "Minimum token count for duplicate detection"
        },

        "codeguard-pro.mcp.tools.madge.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Madge MCP server for dependency analysis"
        },
        "codeguard-pro.mcp.tools.madge.endpoint": {
          "type": "string",
          "default": "",
          "description": "Madge MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.tools.depcheck.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Depcheck MCP server for unused dependency detection"
        },
        "codeguard-pro.mcp.tools.depcheck.endpoint": {
          "type": "string",
          "default": "",
          "description": "Depcheck MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.tools.npmCheckUpdates.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable npm-check-updates MCP server for dependency updates"
        },
        "codeguard-pro.mcp.tools.npmCheckUpdates.endpoint": {
          "type": "string",
          "default": "",
          "description": "npm-check-updates MCP server endpoint URL (leave empty for local execution)"
        },

        "codeguard-pro.mcp.timeout": {
          "type": "number",
          "default": 30000,
          "description": "MCP server request timeout in milliseconds"
        },
        "codeguard-pro.mcp.retryAttempts": {
          "type": "number",
          "default": 3,
          "description": "Number of retry attempts for failed MCP requests"
        },
        "codeguard-pro.mcp.retryDelay": {
          "type": "number",
          "default": 1000,
          "description": "Delay between retry attempts in milliseconds"
        },
        "codeguard-pro.mcp.logLevel": {
          "type": "string",
          "enum": ["error", "warn", "info", "debug"],
          "default": "info",
          "description": "MCP server logging level"
        },
        "codeguard-pro.mcp.cache.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable MCP response caching to improve performance"
        },
        "codeguard-pro.mcp.cache.ttl": {
          "type": "number",
          "default": 300000,
          "description": "MCP cache TTL (time to live) in milliseconds"
        },
        "codeguard-pro.mcp.fallbackToLocal": {
          "type": "boolean",
          "default": true,
          "description": "Fallback to local tool execution when MCP servers are unavailable"
        }
      }
    },
    "menus": {
      "editor/context": [
        {
          "submenu": "codeguard-pro.submenu",
          "group": "navigation"
        }
      ],
      "codeguard-pro.submenu": [
        {
          "command": "codeguard-pro.eslintCode",
          "group": "1_linting"
        },
        {
          "command": "codeguard-pro.biomeCode",
          "group": "1_linting"
        },
        {
          "command": "codeguard-pro.typescriptEslint",
          "group": "1_linting"
        },
        {
          "command": "codeguard-pro.prettier",
          "group": "1_linting"
        },
        {
          "command": "codeguard-pro.npmAudit",
          "group": "2_security"
        },
        {
          "command": "codeguard-pro.eslintSecurity",
          "group": "2_security"
        },
        {
          "command": "codeguard-pro.retireJs",
          "group": "2_security"
        },
        {
          "command": "codeguard-pro.playwright",
          "group": "3_testing"
        },
        {
          "command": "codeguard-pro.cypress",
          "group": "3_testing"
        },
        {
          "command": "codeguard-pro.jest",
          "group": "3_testing"
        },
        {
          "command": "codeguard-pro.sonarJs",
          "group": "4_analysis"
        },
        {
          "command": "codeguard-pro.plato",
          "group": "4_analysis"
        },
        {
          "command": "codeguard-pro.duplicateCode",
          "group": "4_analysis"
        },
        {
          "command": "codeguard-pro.madgeDeps",
          "group": "5_dependencies"
        },
        {
          "command": "codeguard-pro.depcheck",
          "group": "5_dependencies"
        },
        {
          "command": "codeguard-pro.updateDependencies",
          "group": "5_dependencies"
        }
      ]
    },
    "submenus": [
      {
        "id": "codeguard-pro.submenu",
        "label": "CodeGuard Pro"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "npx tsc -p ./",
    "watch": "npx tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "npx eslint src --ext ts",
    "format": "npx prettier --write src/**/*.ts",
    "duplicate:check": "npx jscpd src/",
    "duplicate:check:detailed": "npx jscpd --min-lines 3 --min-tokens 30 --threshold 0 src/",
    "structure:analyze": "npx madge --summary --extensions ts,js src/ && npx dependency-cruiser --output-type err src/",
    "structure:circular": "npx madge --circular --warning --extensions ts,js src/",
    "structure:dependencies": "npx dependency-cruiser --output-type text src/",
    "structure:report": "npx madge --json --extensions ts,js src/ > reports/structure-madge.json && npx dependency-cruiser --output-type json --output-to reports/structure-dependencies.json src/",
    "deps:analyze": "npx madge --summary --extensions ts,js src/",
    "deps:circular": "npx madge --circular --warning --extensions ts,js src/",
    "deps:orphans": "npx madge --orphans --extensions ts,js src/",
    "deps:leaves": "npx madge --leaves --extensions ts,js src/",
    "deps:tree": "npx madge --extensions ts,js src/",
    "deps:json": "npx madge --json --extensions ts,js src/ > reports/madge-dependencies.json",
    "deps:unused": "npx depcheck",
    "deps:outdated": "npm outdated",
    "deps:updates": "npx npm-check-updates",
    "deps:updates:check": "npx npm-check-updates --target latest",
    "deps:updates:preview": "npx npm-check-updates --target greatest",
    "deps:updates:apply": "npx npm-check-updates -u",
    "deps:updates:report": "npx npm-check-updates --jsonAll > reports/dependency-updates.json",
    "deps:security": "npm audit",
    "deps:security:fix": "npm audit fix",
    "deps:security:report": "npm audit --json > reports/security-audit.json",
    "deps:full-report": "npm run deps:analyze && npm run deps:circular && npm run deps:orphans && npm run deps:unused && npm run deps:updates:report && npm run deps:security:report",
    "audit": "npx audit-ci --config audit-ci.json",
    "audit:prod": "npx audit-ci --config audit-ci.json --skip-dev",
    "audit:full": "npx audit-ci --config audit-ci.json --low --report --summary",
    "audit:json": "npx audit-ci --config audit-ci.json --output-format json",
    "security:retire": "npx retire --path src --severity medium --ignorefile .retireignore.json",
    "security:retire:full": "npx retire --verbose --severity low --ignorefile .retireignore.json",
    "security:owasp": "npx @cyclonedx/cyclonedx-npm --output-file owasp-sbom.json --gather-license-texts --spec-version 1.6",
    "security:owasp:check": "npx cdxgen --evidence --profile appsec --validate --spec-version 1.6 -o owasp-vuln-check.json .",
    "security:sbom": "npx @cyclonedx/cyclonedx-npm --package-lock-only --output-file sbom-lockfile.json",
    "test": "npx vscode-test",
    "test:jest": "npx jest",
    "test:jest:watch": "npx jest --watch",
    "test:jest:coverage": "npx jest --coverage",
    "test:mocha": "npx mocha",
    "test:mocha:watch": "npx mocha --watch",
    "test:mocha:reporter": "npx mocha --reporter json",
    "test:mocha:coverage": "npx c8 --reporter=text --reporter=html --reporter=lcov npx mocha",
    "test:vitest": "npx vitest run",
    "test:vitest:watch": "npx vitest",
    "test:vitest:ui": "npx vitest --ui",
    "test:vitest:coverage": "npx vitest run --coverage",
    "test:wdio": "npx wdio run",
    "test:wdio:headless": "npx wdio run --headless",
    "test:wdio:watch": "npx wdio run --watch",
    "test:playwright": "npx playwright test",
    "test:playwright:ui": "npx playwright test --ui",
    "test:playwright:debug": "npx playwright test --debug",
    "test:playwright:headed": "npx playwright test --headed",
    "test:playwright:chrome": "npx playwright test --project=chromium",
    "test:playwright:firefox": "npx playwright test --project=firefox",
    "test:playwright:webkit": "npx playwright test --project=webkit",
    "test:playwright:report": "npx playwright show-report",
    "test:cypress": "npx cypress run",
    "test:cypress:open": "npx cypress open",
    "test:cypress:headless": "npx cypress run --headless",
    "test:cypress:chrome": "npx cypress run --browser chrome",
    "test:cypress:firefox": "npx cypress run --browser firefox",
    "test:cypress:edge": "npx cypress run --browser edge",
    "test:cypress:component": "npx cypress run --component",
    "test:cypress:e2e": "npx cypress run --e2e",
    "test:cypress:record": "npx cypress run --record",
    "test:cypress:parallel": "npx cypress run --parallel"
  },
  "devDependencies": {
    "@cyclonedx/cdxgen": "^11.6.0",
    "@eslint/js": "^9.34.0",
    "@jest/globals": "^30.1.1",
    "@playwright/test": "^1.55.0",
    "@types/chai": "^5.2.2",
    "@types/mocha": "^10.0.10",
    "@types/node": "^24.3.0",
    "@types/vscode": "^1.103.0",
    "@typescript-eslint/eslint-plugin": "^8.41.0",
    "@typescript-eslint/parser": "^8.41.0",
    "@vitest/ui": "^3.2.4",
    "@vscode/test-cli": "^0.0.11",
    "@wdio/cli": "^9.19.2",
    "audit-ci": "^7.1.0",
    "c8": "^10.1.3",
    "chai": "^6.0.1",
    "cypress": "^15.0.0",
    "depcheck": "^1.4.7",
    "eslint": "^9.34.0",
    "eslint-import-resolver-typescript": "^4.4.4",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.5",
    "jest": "^30.1.1",
    "jest-junit": "^16.0.0",
    "jscpd": "^4.0.5",
    "madge": "^8.0.0",
    "mocha": "^11.7.1",
    "playwright": "^1.55.0",
    "prettier": "^3.6.2",
    "retire": "^5.3.0",
    "ts-jest": "^29.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.2",
    "vitest": "^3.2.4"
  },
  "standard": {
    "env": [
      "jest",
      "mocha"
    ],
    "globals": [
      "describe",
      "it",
      "test",
      "expect",
      "beforeEach",
      "afterEach",
      "beforeAll",
      "afterAll",
      "jest"
    ]
  }
}
