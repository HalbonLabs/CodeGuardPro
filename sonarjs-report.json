[{"filePath":"X:\\CodeGuardPro\\src\\extension.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"X:\\CodeGuardPro\\src\\providers\\QualityHubProvider.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Thenable' is not defined.","line":22,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Quality Hub Provider for CodeGuard Pro Extension\r\nimport * as vscode from 'vscode';\r\n\r\nexport class QualityHubProvider implements vscode.TreeDataProvider<QualityItem> {\r\n  private _onDidChangeTreeData: vscode.EventEmitter<QualityItem | undefined | null | void> = new vscode.EventEmitter<QualityItem | undefined | null | void>();\r\n  readonly onDidChangeTreeData: vscode.Event<QualityItem | undefined | null | void> = this._onDidChangeTreeData.event;\r\n\r\n  private items: QualityItem[] = [];\r\n\r\n  constructor() {\r\n    this.initializeItems();\r\n  }\r\n\r\n  refresh(): void {\r\n    this._onDidChangeTreeData.fire();\r\n  }\r\n\r\n  getTreeItem(element: QualityItem): vscode.TreeItem {\r\n    return element;\r\n  }\r\n\r\n  getChildren(element?: QualityItem): Thenable<QualityItem[]> {\r\n    if (element) {\r\n      return Promise.resolve(element.children || []);\r\n    } else {\r\n      return Promise.resolve(this.items);\r\n    }\r\n  }\r\n\r\n  private initializeItems(): void {\r\n    this.items = [\r\n      new QualityItem(\r\n        'Linting Tools',\r\n        'Analyze code quality and style',\r\n        vscode.TreeItemCollapsibleState.Expanded,\r\n        [\r\n          new QualityItem('ESLint', 'JavaScript/TypeScript linting', vscode.TreeItemCollapsibleState.None),\r\n          new QualityItem('Biome', 'Fast linter and formatter', vscode.TreeItemCollapsibleState.None),\r\n          new QualityItem('Prettier', 'Code formatting', vscode.TreeItemCollapsibleState.None),\r\n          new QualityItem('TypeScript', 'Type checking', vscode.TreeItemCollapsibleState.None)\r\n        ]\r\n      ),\r\n      new QualityItem(\r\n        'Security Tools',\r\n        'Scan for vulnerabilities',\r\n        vscode.TreeItemCollapsibleState.Expanded,\r\n        [\r\n          new QualityItem('npm audit', 'Dependency vulnerabilities', vscode.TreeItemCollapsibleState.None),\r\n          new QualityItem('Retire.js', 'JavaScript library vulnerabilities', vscode.TreeItemCollapsibleState.None),\r\n          new QualityItem('ESLint Security', 'Security-focused linting', vscode.TreeItemCollapsibleState.None)\r\n        ]\r\n      ),\r\n      new QualityItem(\r\n        'Testing Tools',\r\n        'Run automated tests',\r\n        vscode.TreeItemCollapsibleState.Expanded,\r\n        [\r\n          new QualityItem('Jest', 'Unit testing', vscode.TreeItemCollapsibleState.None),\r\n          new QualityItem('Mocha', 'Test framework', vscode.TreeItemCollapsibleState.None),\r\n          new QualityItem('Playwright', 'E2E testing', vscode.TreeItemCollapsibleState.None),\r\n          new QualityItem('Cypress', 'E2E testing', vscode.TreeItemCollapsibleState.None)\r\n        ]\r\n      )\r\n    ];\r\n  }\r\n}\r\n\r\nexport class QualityItem extends vscode.TreeItem {\r\n  constructor(\r\n    public readonly label: string,\r\n    public readonly description: string,\r\n    public readonly collapsibleState: vscode.TreeItemCollapsibleState,\r\n    public readonly children?: QualityItem[]\r\n  ) {\r\n    super(label, collapsibleState);\r\n    this.tooltip = description;\r\n    this.contextValue = children ? 'category' : 'tool';\r\n    \r\n    if (!children) {\r\n      this.command = {\r\n        command: 'quality-hub.runTool',\r\n        title: 'Run Tool',\r\n        arguments: [label.toLowerCase()]\r\n      };\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"X:\\CodeGuardPro\\src\\services\\QualityToolsService.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'commands' is never reassigned. Use 'const' instead.","line":49,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":49,"endColumn":29,"fix":{"range":[1746,1774],"text":"const commands: string[] = [];"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Quality Tools Service for CodeGuard Pro Extension\r\nimport * as vscode from 'vscode';\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\nexport class QualityToolsService {\r\n  constructor(private outputChannel: vscode.OutputChannel) {}\r\n\r\n  async lintCode(targetPath: string, fix: boolean, tool: string): Promise<string> {\r\n    this.outputChannel.appendLine(`Running ${tool} on ${targetPath}, fix: ${fix}`);\r\n    \r\n    try {\r\n      let command = '';\r\n      \r\n      switch (tool) {\r\n        case 'eslint':\r\n          command = fix ? `npx eslint ${targetPath} --fix` : `npx eslint ${targetPath}`;\r\n          break;\r\n        case 'biome':\r\n          command = fix ? `npx biome check ${targetPath} --apply` : `npx biome check ${targetPath}`;\r\n          break;\r\n        case 'prettier':\r\n          command = fix ? `npx prettier --write ${targetPath}` : `npx prettier --check ${targetPath}`;\r\n          break;\r\n        default:\r\n          throw new Error(`Unknown linting tool: ${tool}`);\r\n      }\r\n\r\n      const { stdout, stderr } = await execAsync(command);\r\n      const result = stdout || stderr;\r\n      \r\n      this.outputChannel.appendLine(`✅ ${tool} completed successfully`);\r\n      this.outputChannel.appendLine(result);\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      const errorMessage = `❌ ${tool} failed: ${error}`;\r\n      this.outputChannel.appendLine(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n\r\n  async runSecurityScan(targetPath: string, level: string, dependencies: boolean): Promise<string> {\r\n    this.outputChannel.appendLine(`Running security scan on ${targetPath}, level: ${level}, deps: ${dependencies}`);\r\n    \r\n    try {\r\n      let commands: string[] = [];\r\n      \r\n      if (dependencies) {\r\n        commands.push('npm audit');\r\n        commands.push('npx retire');\r\n      }\r\n      \r\n      commands.push(`npx eslint ${targetPath} --ext .ts,.js -c .eslintrc.json`);\r\n      \r\n      const results: string[] = [];\r\n      \r\n      for (const command of commands) {\r\n        try {\r\n          const { stdout, stderr } = await execAsync(command);\r\n          results.push(stdout || stderr);\r\n        } catch (cmdError) {\r\n          results.push(`Warning: ${command} failed - ${cmdError}`);\r\n        }\r\n      }\r\n      \r\n      const combinedResults = results.join('\\n\\n');\r\n      this.outputChannel.appendLine('✅ Security scan completed');\r\n      this.outputChannel.appendLine(combinedResults);\r\n      \r\n      return combinedResults;\r\n    } catch (error) {\r\n      const errorMessage = `❌ Security scan failed: ${error}`;\r\n      this.outputChannel.appendLine(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n\r\n  async runE2ETests(framework: string, spec: string, headless: boolean, browser: string): Promise<string> {\r\n    this.outputChannel.appendLine(`Running E2E tests with ${framework}, spec: ${spec}, headless: ${headless}, browser: ${browser}`);\r\n    \r\n    try {\r\n      let command = '';\r\n      \r\n      switch (framework) {\r\n        case 'playwright':\r\n          command = headless \r\n            ? `npx playwright test ${spec}` \r\n            : `npx playwright test ${spec} --headed`;\r\n          break;\r\n        case 'cypress':\r\n          command = headless \r\n            ? `npx cypress run --spec \"${spec}\" --browser ${browser}` \r\n            : `npx cypress open --browser ${browser}`;\r\n          break;\r\n        case 'mocha':\r\n          command = `npx mocha ${spec}`;\r\n          break;\r\n        default:\r\n          throw new Error(`Unknown E2E framework: ${framework}`);\r\n      }\r\n\r\n      const { stdout, stderr } = await execAsync(command);\r\n      const result = stdout || stderr;\r\n      \r\n      this.outputChannel.appendLine(`✅ E2E tests completed with ${framework}`);\r\n      this.outputChannel.appendLine(result);\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      const errorMessage = `❌ E2E tests failed with ${framework}: ${error}`;\r\n      this.outputChannel.appendLine(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  }\r\n\r\n  dispose(): void {\r\n    // Cleanup resources if needed\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"X:\\CodeGuardPro\\src\\simple-extension.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"X:\\CodeGuardPro\\src\\ui\\QualityHubSidebarProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"X:\\CodeGuardPro\\src\\ui\\StatusBarManager.ts","messages":[{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":6,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":6,"endColumn":38,"fix":{"range":[188,197],"text":""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Status Bar Manager for CodeGuard Pro Extension\r\nimport * as vscode from 'vscode';\r\n\r\nexport class StatusBarManager {\r\n  private statusBarItem: vscode.StatusBarItem;\r\n  private isVisible: boolean = false;\r\n\r\n  constructor() {\r\n    this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);\r\n    this.statusBarItem.command = 'quality-hub.showSimple';\r\n    this.updateStatusBar('Ready');\r\n  }\r\n\r\n  updateStatusBar(text: string, tooltip?: string): void {\r\n    this.statusBarItem.text = `$(shield) CodeGuard Pro: ${text}`;\r\n    this.statusBarItem.tooltip = tooltip || `CodeGuard Pro - ${text}`;\r\n    \r\n    if (!this.isVisible) {\r\n      this.statusBarItem.show();\r\n      this.isVisible = true;\r\n    }\r\n  }\r\n\r\n  setRunning(tool: string): void {\r\n    this.updateStatusBar(`Running ${tool}...`, `CodeGuard Pro is currently running ${tool}`);\r\n  }\r\n\r\n  setIdle(): void {\r\n    this.updateStatusBar('Ready', 'CodeGuard Pro is ready to analyze your code');\r\n  }\r\n\r\n  setError(message: string): void {\r\n    this.updateStatusBar('Error', `Error: ${message}`);\r\n  }\r\n\r\n  setSuccess(tool: string): void {\r\n    this.updateStatusBar(`${tool} Complete`, `${tool} analysis completed successfully`);\r\n  }\r\n\r\n  hide(): void {\r\n    if (this.isVisible) {\r\n      this.statusBarItem.hide();\r\n      this.isVisible = false;\r\n    }\r\n  }\r\n\r\n  show(): void {\r\n    if (!this.isVisible) {\r\n      this.statusBarItem.show();\r\n      this.isVisible = true;\r\n    }\r\n  }\r\n\r\n  dispose(): void {\r\n    this.statusBarItem.dispose();\r\n  }\r\n}\r\n","usedDeprecatedRules":[]}]