[{"filePath":"X:\\CodeGuardPro\\src\\extension.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":["@stylistic/max-len"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"max-len","url":"https://eslint.style/rules/max-len"}}]}}]},{"filePath":"X:\\CodeGuardPro\\src\\providers\\QualityHubProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":["@stylistic/max-len"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"max-len","url":"https://eslint.style/rules/max-len"}}]}}]},{"filePath":"X:\\CodeGuardPro\\src\\services\\QualityToolsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":["@stylistic/max-len"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"max-len","url":"https://eslint.style/rules/max-len"}}]}}]},{"filePath":"X:\\CodeGuardPro\\src\\simple-extension.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'activate' has too many lines (139). Maximum allowed is 50.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":193,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from \"vscode\";\nimport { QualityHubSidebarProvider } from \"./ui/QualityHubSidebarProvider\";\n\n// Helper function to run terminal commands\nfunction runToolCommand(toolName: string, command: string): void {\n  const terminal = vscode.window.createTerminal(`CodeGuard Pro - ${toolName}`);\n  terminal.show();\n  terminal.sendText(command);\n}\n\nexport function activate(context: vscode.ExtensionContext): void {\n  console.log(\"Quality Hub: Starting activation...\");\n\n  try {\n    // Create sidebar provider for the main Quality Hub panel\n    const sidebarProvider = new QualityHubSidebarProvider(context);\n\n    // Register the sidebar webview provider\n    context.subscriptions.push(\n      vscode.window.registerWebviewViewProvider(\"quality-hub.sidebarView\", sidebarProvider),\n    );\n\n    // Ensure the webview is the active view when the container is opened\n    context.subscriptions.push(\n      vscode.commands.registerCommand(\"quality-hub.focusWebview\", () => {\n        vscode.commands.executeCommand(\"quality-hub.sidebarView.focus\");\n      }),\n    );\n\n    // Register only essential commands (tool commands are handled by sidebar provider)\n    const commands = [\n      vscode.commands.registerCommand(\"quality-hub.showSimple\", () => {\n        console.log(\"Opening Quality Hub webview...\");\n        // First ensure the webview container is visible\n        vscode.commands.executeCommand(\"workbench.view.extension.quality-hub-webview\");\n        // Then focus the webview specifically\n        setTimeout(() => {\n          vscode.commands.executeCommand(\"quality-hub.sidebarView.focus\");\n        }, 100);\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.openSettings\", () => {\n        vscode.commands.executeCommand(\"workbench.action.openSettings\", \"quality-hub\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.test\", () => {\n        vscode.window.showInformationMessage(\"Quality Hub extension is working! 🎯\");\n      }),\n\n      // Register all tool commands\n      vscode.commands.registerCommand(\"quality-hub.eslintCode\", () => {\n        runToolCommand(\"ESLint\", \"npx eslint . --ext .ts,.js,.tsx,.jsx --fix\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.biomeCode\", () => {\n        runToolCommand(\"Biome\", \"npx @biomejs/biome check --apply .\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.typescriptEslint\", () => {\n        runToolCommand(\n          \"TypeScript ESLint\",\n          \"npx eslint . --ext .ts,.tsx --parser @typescript-eslint/parser\",\n        );\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.prettier\", () => {\n        runToolCommand(\"Prettier\", \"npx prettier --write .\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.standardjs\", () => {\n        runToolCommand(\"StandardJS\", \"npx standard --fix\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.npmAudit\", () => {\n        runToolCommand(\"npm audit\", \"npm audit --audit-level moderate\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.eslintSecurity\", () => {\n        runToolCommand(\n          \"ESLint Security\",\n          \"npx eslint . --ext .js,.ts --config .eslintrc-security.js\",\n        );\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.retireJs\", () => {\n        runToolCommand(\"Retire.js\", \"npx retire --js\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.auditCi\", () => {\n        runToolCommand(\"audit-ci\", \"npx audit-ci --config audit-ci.json\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.owaspCheck\", () => {\n        runToolCommand(\n          \"OWASP Dependency Check\",\n          \"npx owasp-dependency-check --project . --format ALL\",\n        );\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.playwright\", () => {\n        runToolCommand(\"Playwright\", \"npx playwright test\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.cypress\", () => {\n        runToolCommand(\"Cypress\", \"npx cypress run\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.jest\", () => {\n        runToolCommand(\"Jest\", \"npx jest\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.mocha\", () => {\n        runToolCommand(\"Mocha\", \"npx mocha\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.vitest\", () => {\n        runToolCommand(\"Vitest\", \"npx vitest run\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.webdriverio\", () => {\n        runToolCommand(\"WebdriverIO\", \"npx wdio run\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.sonarJs\", () => {\n        runToolCommand(\"SonarJS\", \"npx eslint . --ext .js,.ts --config .eslintrc-sonar.js\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.plato\", () => {\n        runToolCommand(\"Plato\", \"npx plato -r -d plato-report src/\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.eslintComplexity\", () => {\n        runToolCommand(\n          \"ESLint Complexity\",\n          \"npx eslint . --ext .js,.ts --rule 'complexity: [error, 10]'\",\n        );\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.duplicateCode\", () => {\n        runToolCommand(\"Duplicate Code Detection\", \"npx jscpd src/\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.codeStructure\", () => {\n        runToolCommand(\n          \"Code Structure Analysis\",\n          \"find src -name '*.ts' -o -name '*.js' | head -20\",\n        );\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.madgeDeps\", () => {\n        runToolCommand(\"Madge Dependencies\", \"npx madge --circular --extensions ts,js src/\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.depcheck\", () => {\n        runToolCommand(\"Depcheck\", \"npx depcheck\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.updateDependencies\", () => {\n        runToolCommand(\"Update Dependencies\", \"npx npm-check-updates\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.sonarQubeApi\", () => {\n        vscode.window.showInformationMessage(\"SonarQube API integration - Configure in settings\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.codacyApi\", () => {\n        vscode.window.showInformationMessage(\"Codacy API integration - Configure in settings\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.codeClimateApi\", () => {\n        vscode.window.showInformationMessage(\"CodeClimate API integration - Configure in settings\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.snykCodeApi\", () => {\n        vscode.window.showInformationMessage(\"Snyk Code API integration - Configure in settings\");\n      }),\n\n      vscode.commands.registerCommand(\"quality-hub.codeFactorApi\", () => {\n        vscode.window.showInformationMessage(\"CodeFactor API integration - Configure in settings\");\n      }),\n    ];\n\n    context.subscriptions.push(...commands);\n\n    console.log(\"Quality Hub: Extension activated successfully!\");\n    vscode.window.showInformationMessage(\n      \"Quality Hub extension activated! Click the dashboard icon in the activity bar.\",\n    );\n  } catch (error) {\n    console.error(\"Quality Hub: Failed to activate extension:\", error);\n    vscode.window.showErrorMessage(`Quality Hub activation failed: ${String(error)}`);\n  }\n}\n\nexport function deactivate(): void {\n  console.log(\"Quality Hub: Extension deactivated\");\n}\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":["@stylistic/max-len"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"max-len","url":"https://eslint.style/rules/max-len"}}]}}]},{"filePath":"X:\\CodeGuardPro\\src\\ui\\QualityHubSidebarProvider.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Method 'resolveWebviewView' has too many lines (54). Maximum allowed is 50.","line":21,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":88,"endColumn":4},{"ruleId":"max-len","severity":1,"message":"This line has a length of 195. Maximum allowed is 120.","line":49,"column":1,"nodeType":"Program","messageId":"max","endLine":49,"endColumn":196},{"ruleId":"max-len","severity":1,"message":"This line has a length of 156. Maximum allowed is 120.","line":53,"column":1,"nodeType":"Program","messageId":"max","endLine":53,"endColumn":157},{"ruleId":"max-len","severity":1,"message":"This line has a length of 125. Maximum allowed is 120.","line":55,"column":1,"nodeType":"Program","messageId":"max","endLine":55,"endColumn":126},{"ruleId":"max-len","severity":1,"message":"This line has a length of 149. Maximum allowed is 120.","line":72,"column":1,"nodeType":"Program","messageId":"max","endLine":72,"endColumn":150},{"ruleId":"max-lines-per-function","severity":1,"message":"Method 'buildWebviewHTML' has too many lines (384). Maximum allowed is 50.","line":127,"column":3,"nodeType":"MethodDefinition","messageId":"exceed","endLine":524,"endColumn":4},{"ruleId":"max-lines","severity":1,"message":"File has too many lines (518). Maximum allowed is 300.","line":330,"column":1,"nodeType":null,"messageId":"exceed","endLine":561,"endColumn":1},{"ruleId":"max-len","severity":1,"message":"This line has a length of 128. Maximum allowed is 120.","line":543,"column":1,"nodeType":"Program","messageId":"max","endLine":543,"endColumn":129}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as vscode from \"vscode\";\n\ninterface WebviewMessage {\n  command: \"runTool\" | \"runToolWithAI\" | \"refresh\" | \"openSettings\";\n  toolId?: string;\n  toolCommand?: string;\n  toolName?: string;\n}\n\nexport class QualityHubSidebarProvider implements vscode.WebviewViewProvider {\n  public static readonly viewType = \"qualityHubSidebar\";\n\n  private _view?: vscode.WebviewView;\n  private readonly _extensionUri: vscode.Uri;\n  private readonly toolLastRunTimes: Map<string, number> = new Map();\n\n  constructor(readonly context: vscode.ExtensionContext) {\n    this._extensionUri = context.extensionUri;\n  }\n\n  public resolveWebviewView(\n    webviewView: vscode.WebviewView,\n\n    _context?: vscode.WebviewViewResolveContext,\n\n    _token?: vscode.CancellationToken,\n  ): void {\n    this._view = webviewView;\n\n    webviewView.webview.options = {\n      enableScripts: true,\n      localResourceRoots: [this._extensionUri],\n    };\n\n    webviewView.webview.html = this.getWebviewContent();\n\n    webviewView.webview.onDidReceiveMessage((data: WebviewMessage) => {\n      switch (data.command) {\n        case \"runTool\":\n          if (data.toolId && data.toolCommand) {\n            this.updateToolLastRunTime(data.toolId);\n            vscode.commands.executeCommand(data.toolCommand);\n          }\n          break;\n        case \"runToolWithAI\": {\n          if (data.toolId && data.toolName) {\n            this.updateToolLastRunTime(data.toolId);\n            // Send comprehensive prompt to GitHub Copilot Chat\n            const prompt = `I need your help to run ${data.toolName} analysis on this project. IMPORTANT: Do not execute any VS Code commands or extensions - only run terminal/command line tools.\n\nPlease follow these steps:\n\n1. **Install Dependencies**: First check if ${data.toolName} is installed, and if not, install any required packages (npm/npx/global installation as needed)\n\n2. **Execute Terminal Command**: Run the ${data.toolName} analysis using appropriate terminal commands (NOT VS Code commands)\n\n3. **Monitor Output**: Carefully review all output, warnings, errors, and recommendations\n\n4. **Apply Fixes**: After the analysis completes, immediately:\n   - Fix any auto-fixable issues (using --fix flags where available)\n   - Apply recommended security patches\n   - Update any outdated dependencies if suggested\n   - Create or update configuration files if needed\n   - Address any critical or high-severity issues found\n\n5. **Summary**: Provide a clear summary of:\n   - What issues were found\n   - What fixes were applied automatically\n   - Any remaining issues that need manual attention\n   - Next recommended actions\n\nPlease execute the appropriate terminal commands only and take immediate action on the results. Don't just report issues - fix them where possible!`;\n\n            vscode.commands.executeCommand(\"workbench.action.chat.open\", {\n              query: prompt,\n            });\n          }\n          break;\n        }\n        case \"refresh\":\n          webviewView.webview.html = this.getWebviewContent();\n          break;\n        case \"openSettings\":\n          vscode.commands.executeCommand(\"workbench.action.openSettings\", \"quality-hub\");\n          break;\n      }\n    });\n  }\n\n  private updateToolLastRunTime(toolId: string): void {\n    this.toolLastRunTimes.set(toolId, Date.now());\n    if (this._view) {\n      this._view.webview.html = this.getWebviewContent();\n    }\n  }\n\n  private getToolLastRunTime(toolId: string): number | undefined {\n    return this.toolLastRunTimes.get(toolId);\n  }\n\n  private formatLastRunTime(timestamp: number | undefined): string {\n    if (!timestamp) {\n      return \"Never run\";\n    }\n\n    const now = Date.now();\n    const diff = now - timestamp;\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (minutes < 1) {\n      return \"Just now\";\n    } else if (minutes < 60) {\n      return `${minutes}m ago`;\n    } else if (hours < 24) {\n      return `${hours}h ago`;\n    } else {\n      return `${days}d ago`;\n    }\n  }\n\n  private getWebviewContent(): string {\n    return this.buildWebviewHTML();\n  }\n\n  private buildWebviewHTML(): string {\n    const header = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeGuard Pro</title>\n    <style>\n        body {\n            font-family: var(--vscode-font-family);\n            color: var(--vscode-foreground);\n            background-color: var(--vscode-sidebar-background);\n            margin: 0;\n            padding: 8px;\n            font-size: var(--vscode-font-size);\n            line-height: 1.4;\n        }\n        .header {\n            text-align: center;\n            margin-bottom: 16px;\n            padding: 12px;\n            background: var(--vscode-editor-background);\n            border-radius: 6px;\n            border: 1px solid var(--vscode-panel-border);\n        }\n        .title {\n            font-size: 1.2em;\n            font-weight: 600;\n            margin-bottom: 4px;\n            color: var(--vscode-titleBar-activeForeground);\n        }\n        .subtitle {\n            font-size: 0.85em;\n            color: var(--vscode-descriptionForeground);\n        }\n        .button-row {\n            display: flex;\n            gap: 8px;\n            margin-bottom: 16px;\n        }\n        .refresh-btn, .settings-btn {\n            flex: 1;\n            padding: 8px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 0.9em;\n        }\n        .refresh-btn {\n            background: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n        }\n        .settings-btn {\n            background: var(--vscode-button-secondaryBackground);\n            color: var(--vscode-button-secondaryForeground);\n        }\n        .category {\n            margin-bottom: 8px;\n        }\n        .category-header {\n            display: flex;\n            align-items: center;\n            padding: 8px 12px;\n            background: var(--vscode-list-inactiveSelectionBackground);\n            border: 1px solid var(--vscode-panel-border);\n            border-radius: 4px;\n            cursor: pointer;\n            font-weight: 600;\n            font-size: 0.95em;\n        }\n        .category-icon {\n            margin-right: 8px;\n        }\n        .expand-icon {\n            margin-left: auto;\n            transition: transform 0.2s ease;\n            transform: rotate(-90deg);\n        }\n        .category.expanded .expand-icon {\n            transform: rotate(0deg);\n        }\n        .category-content {\n            margin-top: 8px;\n            display: none;\n        }\n        .category.expanded .category-content {\n            display: block;\n        }\n        .tool-item {\n            background: var(--vscode-editor-background);\n            border: 1px solid var(--vscode-panel-border);\n            border-radius: 4px;\n            padding: 8px;\n            margin-bottom: 6px;\n        }\n        .tool-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 4px;\n        }\n        .tool-name {\n            font-weight: 500;\n            font-size: 0.9em;\n        }\n        .tool-last-run {\n            font-size: 0.75em;\n            color: var(--vscode-descriptionForeground);\n        }\n        .tool-description {\n            font-size: 0.8em;\n            color: var(--vscode-descriptionForeground);\n            margin-bottom: 8px;\n            line-height: 1.3;\n        }\n        .tool-buttons {\n            display: flex;\n            gap: 4px;\n        }\n        .run-btn, .ai-btn {\n            flex: 1;\n            padding: 6px 8px;\n            border: none;\n            border-radius: 3px;\n            cursor: pointer;\n            font-size: 0.8em;\n            font-weight: 500;\n        }\n        .run-btn {\n            background: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n        }\n        .ai-btn {\n            background: var(--vscode-button-secondaryBackground);\n            color: var(--vscode-button-secondaryForeground);\n        }\n        .ai-btn:before {\n            content: \"🤖 \";\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <div class=\"title\">CodeGuard Pro</div>\n        <div class=\"subtitle\">Code quality, security & testing tools</div>\n    </div>\n    \n    <div class=\"button-row\">\n        <button class=\"refresh-btn\" onclick=\"refresh()\">🔄 Refresh</button>\n        <button class=\"settings-btn\" onclick=\"openSettings()\">⚙️ Settings</button>\n    </div>`;\n\n    const lintingCategory = this.createCategory(\"🔧\", \"Linting & Formatting\", [\n      {\n        id: \"eslint\",\n        name: \"ESLint\",\n        cmd: \"quality-hub.eslintCode\",\n        desc: \"Industry-standard JavaScript/TypeScript linting with extensive rule ecosystem and auto-fix capabilities.\",\n      },\n      {\n        id: \"biome\",\n        name: \"Biome\",\n        cmd: \"quality-hub.biomeCode\",\n        desc: \"Ultra-fast formatter, linter, and bundler for web projects. Combines the functionality of Prettier, ESLint, and more in a single tool.\",\n      },\n      {\n        id: \"typescript-eslint\",\n        name: \"TypeScript ESLint\",\n        cmd: \"quality-hub.typescriptEslint\",\n        desc: \"Specialized ESLint configuration for TypeScript projects. Provides type-aware linting rules and TypeScript-specific code quality checks.\",\n      },\n      {\n        id: \"prettier\",\n        name: \"Prettier\",\n        cmd: \"quality-hub.prettier\",\n        desc: \"Opinionated code formatter that enforces consistent style. Automatically formats code for readability and maintainability across your team.\",\n      },\n      {\n        id: \"standardjs\",\n        name: \"StandardJS\",\n        cmd: \"quality-hub.standardjs\",\n        desc: \"Zero-configuration JavaScript style guide and linter. Enforces consistent coding style without the need for configuration files.\",\n      },\n    ]);\n\n    const securityCategory = this.createCategory(\"🔒\", \"Security Tools\", [\n      {\n        id: \"npm-audit\",\n        name: \"npm audit\",\n        cmd: \"quality-hub.npmAudit\",\n        desc: \"Built-in npm security audit tool for identifying vulnerabilities in dependencies.\",\n      },\n      {\n        id: \"eslint-security\",\n        name: \"ESLint Security\",\n        cmd: \"quality-hub.eslintSecurity\",\n        desc: \"Security-focused ESLint rules to identify potential security vulnerabilities in JavaScript code.\",\n      },\n      {\n        id: \"retire-js\",\n        name: \"Retire.js\",\n        cmd: \"quality-hub.retireJs\",\n        desc: \"Scanner for identifying known vulnerabilities in JavaScript libraries and dependencies.\",\n      },\n      {\n        id: \"audit-ci\",\n        name: \"audit-ci\",\n        cmd: \"quality-hub.auditCi\",\n        desc: \"Audit your NPM dependencies in continuous integration environments with configurable thresholds.\",\n      },\n      {\n        id: \"owasp-check\",\n        name: \"OWASP Dependency Check\",\n        cmd: \"quality-hub.owaspCheck\",\n        desc: \"OWASP dependency check utility that identifies project dependencies and checks if there are any known, publicly disclosed, vulnerabilities.\",\n      },\n    ]);\n\n    const testingCategory = this.createCategory(\"🧪\", \"Testing Tools\", [\n      {\n        id: \"playwright\",\n        name: \"Playwright\",\n        cmd: \"quality-hub.playwright\",\n        desc: \"Modern end-to-end testing framework with support for multiple browsers, devices, and platforms.\",\n      },\n      {\n        id: \"cypress\",\n        name: \"Cypress\",\n        cmd: \"quality-hub.cypress\",\n        desc: \"JavaScript end-to-end testing framework with time-travel debugging and real-time browser testing.\",\n      },\n      {\n        id: \"jest\",\n        name: \"Jest\",\n        cmd: \"quality-hub.jest\",\n        desc: \"Delightful JavaScript testing framework with built-in mocking, assertion library, and code coverage reports.\",\n      },\n      {\n        id: \"mocha\",\n        name: \"Mocha\",\n        cmd: \"quality-hub.mocha\",\n        desc: \"Feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple.\",\n      },\n      {\n        id: \"vitest\",\n        name: \"Vitest\",\n        cmd: \"quality-hub.vitest\",\n        desc: \"A blazing fast unit test framework powered by Vite. Compatible with Jest APIs for easy migration.\",\n      },\n      {\n        id: \"webdriverio\",\n        name: \"WebdriverIO\",\n        cmd: \"quality-hub.webdriverio\",\n        desc: \"Next-gen browser and mobile automation test framework for Node.js with built-in test runner.\",\n      },\n    ]);\n\n    const analysisCategory = this.createCategory(\"📊\", \"Analysis Tools\", [\n      {\n        id: \"sonar-js\",\n        name: \"SonarJS\",\n        cmd: \"quality-hub.sonarJs\",\n        desc: \"Static code analysis tool for JavaScript and TypeScript that detects bugs, vulnerabilities, and code smells.\",\n      },\n      {\n        id: \"plato\",\n        name: \"Plato\",\n        cmd: \"quality-hub.plato\",\n        desc: \"JavaScript source code visualization, static analysis, and complexity analysis tool with beautiful reports.\",\n      },\n      {\n        id: \"eslint-complexity\",\n        name: \"ESLint Complexity\",\n        cmd: \"quality-hub.eslintComplexity\",\n        desc: \"Measure and enforce cyclomatic complexity limits in your code. Helps identify overly complex functions that may be hard to maintain.\",\n      },\n      {\n        id: \"duplicate-code\",\n        name: \"Duplicate Code Detection\",\n        cmd: \"quality-hub.duplicateCode\",\n        desc: \"Find and report copy-pasted code blocks across your project. Helps identify refactoring opportunities and reduce technical debt.\",\n      },\n      {\n        id: \"code-structure\",\n        name: \"Code Structure Analysis\",\n        cmd: \"quality-hub.codeStructure\",\n        desc: \"Analyze project file structure, module organization, and architectural patterns. Provides insights into codebase organization and scalability.\",\n      },\n    ]);\n\n    const dependenciesCategory = this.createCategory(\"📦\", \"Dependencies\", [\n      {\n        id: \"madge-deps\",\n        name: \"Madge Dependencies\",\n        cmd: \"quality-hub.madgeDeps\",\n        desc: \"Detect circular dependencies and generate dependency graphs. Visualize module relationships and identify problematic dependency cycles.\",\n      },\n      {\n        id: \"depcheck\",\n        name: \"Depcheck\",\n        cmd: \"quality-hub.depcheck\",\n        desc: \"Find unused dependencies and missing dependencies in your project. Helps keep package.json clean and reduces bundle size.\",\n      },\n      {\n        id: \"update-deps\",\n        name: \"Update Dependencies\",\n        cmd: \"quality-hub.updateDependencies\",\n        desc: \"Check for available updates to project dependencies and get detailed upgrade information. Helps keep dependencies current and secure.\",\n      },\n    ]);\n\n    const apiCategory = this.createCategory(\"🌐\", \"API Tools\", [\n      {\n        id: \"sonarqube-api\",\n        name: \"SonarQube API\",\n        cmd: \"quality-hub.sonarQubeApi\",\n        desc: \"Connect to SonarQube server for enterprise-grade code quality analysis. Push metrics and retrieve detailed quality gate results and project insights.\",\n      },\n      {\n        id: \"codacy-api\",\n        name: \"Codacy API\",\n        cmd: \"quality-hub.codacyApi\",\n        desc: \"Connect to Codacy platform for automated code review and quality analysis. Track code quality metrics and receive detailed improvement suggestions.\",\n      },\n      {\n        id: \"codeclimate-api\",\n        name: \"CodeClimate API\",\n        cmd: \"quality-hub.codeClimateApi\",\n        desc: \"Connect to CodeClimate for maintainability and test coverage analysis. Get actionable insights to improve code quality over time.\",\n      },\n      {\n        id: \"snyk-api\",\n        name: \"Snyk Code API\",\n        cmd: \"quality-hub.snykCodeApi\",\n        desc: \"Connect to Snyk security platform for vulnerability scanning and license compliance. Real-time security monitoring and fix recommendations.\",\n      },\n      {\n        id: \"codefactor-api\",\n        name: \"CodeFactor API\",\n        cmd: \"quality-hub.codeFactorApi\",\n        desc: \"Connect to CodeFactor for continuous code quality monitoring. Get real-time feedback on code changes and maintain quality standards.\",\n      },\n    ]);\n\n    const footer = `\n    <script>\n        const vscode = acquireVsCodeApi();\n\n        function toggleCategory(header) {\n            const category = header.parentElement;\n            category.classList.toggle('expanded');\n        }\n\n        function runTool(command, toolName, toolId) {\n            vscode.postMessage({\n                command: 'runTool',\n                toolCommand: command,\n                toolName: toolName,\n                toolId: toolId\n            });\n        }\n\n        function runWithAI(command, toolName, toolId) {\n            vscode.postMessage({\n                command: 'runToolWithAI',\n                toolCommand: command,\n                toolName: toolName,\n                toolId: toolId\n            });\n        }\n\n        function refresh() {\n            vscode.postMessage({\n                command: 'refresh'\n            });\n        }\n\n        function openSettings() {\n            vscode.postMessage({\n                command: 'openSettings'\n            });\n        }\n    </script>\n</body>\n</html>`;\n\n    return (\n      header +\n      lintingCategory +\n      securityCategory +\n      testingCategory +\n      analysisCategory +\n      dependenciesCategory +\n      apiCategory +\n      footer\n    );\n  }\n\n  private createCategory(\n    icon: string,\n    title: string,\n    tools: Array<{ id: string; name: string; cmd: string; desc: string }>,\n  ): string {\n    const toolItems = tools\n      .map((tool) => {\n        const lastRun = this.formatLastRunTime(this.getToolLastRunTime(tool.id));\n        return `\n            <div class=\"tool-item\">\n                <div class=\"tool-header\">\n                    <div class=\"tool-name\">${tool.name}</div>\n                    <div class=\"tool-last-run\">${lastRun}</div>\n                </div>\n                <div class=\"tool-description\">${tool.desc}</div>\n                <div class=\"tool-buttons\">\n                    <button class=\"run-btn\" onclick=\"runTool('${tool.cmd}', '${tool.name}', '${tool.id}')\">Run</button>\n                    <button class=\"ai-btn\" onclick=\"runWithAI('${tool.cmd}', '${tool.name}', '${tool.id}')\">Run with AI</button>\n                </div>\n            </div>`;\n      })\n      .join(\"\");\n\n    return `\n    <div class=\"category\">\n        <div class=\"category-header\" onclick=\"toggleCategory(this)\">\n            <span class=\"category-icon\">${icon}</span>\n            <span>${title}</span>\n            <span class=\"expand-icon\">▼</span>\n        </div>\n        <div class=\"category-content\">${toolItems}\n        </div>\n    </div>`;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":["@stylistic/max-len"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"max-len","url":"https://eslint.style/rules/max-len"}}]}}]},{"filePath":"X:\\CodeGuardPro\\src\\ui\\StatusBarManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"max-len","replacedBy":["@stylistic/max-len"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"max-len","url":"https://eslint.style/rules/max-len"}}]}}]}]